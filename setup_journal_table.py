#!/usr/bin/env python3
"""
Script to create and test the journal_entries table in Supabase
"""
import requests
import os
from database import get_supabase_client

def test_table_exists():
    """Test if the journal_entries table exists and is accessible"""
    
    supabase_url = os.environ.get('SUPABASE_URL')
    supabase_key = os.environ.get('SUPABASE_KEY')
    
    if not supabase_url or not supabase_key:
        print("Error: Missing environment variables")
        return False
    
    # Test table access
    test_url = f"{supabase_url}/rest/v1/journal_entries?select=id&limit=1"
    
    headers = {
        'apikey': supabase_key,
        'Authorization': f'Bearer {supabase_key}',
        'Content-Type': 'application/json'
    }
    
    try:
        print("Testing table access...")
        response = requests.get(test_url, headers=headers)
        
        if response.status_code == 200:
            print("✓ Table exists and is accessible")
            print(f"Response: {response.text}")
            return True
        else:
            print(f"Error accessing table: {response.status_code}")
            print(f"Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"Error: {e}")
        return False

def insert_test_entry():
    """Insert a test journal entry"""
    
    supabase = get_supabase_client()
    
    test_entry = {
        "user_id": "test_user_123",
        "psalm_id": 1,
        "prompt_responses": {
            "Lord, where is my heart/soul today?": "Test reflection on heart/soul",
            "LOOK! Lord, help me discover new truth from your Word today.": "Test discovery from scripture",
            "LISTEN! Lord, what is your thought for me today from your Word?": "Test listening to God",
            "RESPOND: Lord, what do I need to talk to you about? What are you calling me to do?": "Test response and action"
        }
    }
    
    try:
        print("Inserting test journal entry...")
        result = supabase.table('journal_entries').insert(test_entry).execute()
        
        if result.data:
            entry_id = result.data[0]['id']
            print(f"✓ Test entry created with ID: {entry_id}")
            
            # Clean up test entry
            supabase.table('journal_entries').delete().eq('id', entry_id).execute()
            print("✓ Test entry cleaned up")
            return True
        else:
            print("Error: No data returned from insert")
            return False
            
    except Exception as e:
        print(f"Error inserting test entry: {e}")
        return False

if __name__ == "__main__":
    print("=== Journal Table Setup and Test ===")
    
    # Test if table exists
    if test_table_exists():
        print("\n=== Testing Journal Entry Insert ===")
        if insert_test_entry():
            print("\n✓ Journal table is working correctly!")
        else:
            print("\n✗ Journal table insert failed")
    else:
        print("\nTable doesn't exist. Please create it manually in Supabase SQL Editor:")
        print("""
CREATE TABLE IF NOT EXISTS journal_entries (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id TEXT NOT NULL,
    psalm_id INT8 NOT NULL,
    prompt_responses JSONB NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_journal_entries_user_id ON journal_entries(user_id);
CREATE INDEX IF NOT EXISTS idx_journal_entries_psalm_id ON journal_entries(psalm_id);
CREATE INDEX IF NOT EXISTS idx_journal_entries_user_psalm ON journal_entries(user_id, psalm_id);
        """)